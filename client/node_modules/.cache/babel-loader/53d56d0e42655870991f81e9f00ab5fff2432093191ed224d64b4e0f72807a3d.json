{"ast":null,"code":"import axios from 'axios';\n\n// Create a mock user for development\nconst mockUser = {\n  _id: 'user1',\n  name: 'Jane Smith',\n  email: 'jane@example.com',\n  subscription: 'premium',\n  subscriptionExpiry: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n  children: [{\n    _id: 'child1',\n    name: 'Emma',\n    birthdate: new Date(Date.now() - 3 * 365 * 24 * 60 * 60 * 1000).toISOString(),\n    interests: ['animals', 'drawing', 'music'],\n    developmentalFocus: ['language', 'motor']\n  }]\n};\n\n// Mock activities\nconst mockActivities = [{\n  _id: '1',\n  title: 'Sensory Water Play',\n  description: 'Develop fine motor skills and sensory exploration with water and various containers.',\n  images: ['https://images.unsplash.com/photo-1596464716127-f2a82984de30?w=500&auto=format&fit=crop'],\n  timeRequired: 20,\n  ageRange: {\n    min: 1,\n    max: 3\n  },\n  developmentalAreas: ['sensory', 'motor'],\n  materials: ['Water', 'Containers', 'Toys'],\n  steps: ['Fill containers with water', 'Add toys and tools for exploration', 'Supervise play and encourage exploration'],\n  isPremium: false\n}, {\n  _id: '2',\n  title: 'Color Sorting Game',\n  description: 'Learn colors and practice categorization with this simple sorting activity.',\n  images: ['https://images.unsplash.com/photo-1615147342761-9238e15d8b96?w=500&auto=format&fit=crop'],\n  timeRequired: 15,\n  ageRange: {\n    min: 2,\n    max: 4\n  },\n  developmentalAreas: ['cognitive', 'motor'],\n  materials: ['Colored objects', 'Sorting containers'],\n  steps: ['Gather colored objects', 'Set up sorting containers', 'Demonstrate sorting by color', 'Let child practice sorting'],\n  isPremium: false\n}, {\n  _id: '3',\n  title: 'DIY Musical Instruments',\n  description: 'Create simple instruments and explore rhythm, sound, and music concepts.',\n  images: ['https://images.unsplash.com/photo-1619379179326-c50977cd30fa?w=500&auto=format&fit=crop'],\n  timeRequired: 30,\n  ageRange: {\n    min: 3,\n    max: 6\n  },\n  developmentalAreas: ['creative', 'motor', 'cognitive'],\n  materials: ['Empty containers', 'Rice/beans', 'Rubber bands'],\n  steps: ['Gather materials', 'Create shakers with containers and rice', 'Make string instruments with rubber bands', 'Explore different sounds'],\n  isPremium: false\n}];\n\n// Mock favorites\nconst mockFavorites = [mockActivities[0], mockActivities[2]];\n\n// Mock history\nconst mockHistory = [{\n  _id: 'history1',\n  activity: mockActivities[0],\n  completedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n  notes: 'Emma loved playing with the water colors!'\n}, {\n  _id: 'history2',\n  activity: mockActivities[1],\n  completedDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n  notes: null\n}];\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include the auth token in all requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  // Handle 401 Unauthorized errors (token expired or invalid)\n  if (error.response && error.response.status === 401) {\n    console.log('Authentication error detected:', error.response.data);\n    localStorage.removeItem('token');\n    // You could redirect to login page here or handle in the component\n  }\n\n  // Log all API errors for debugging\n  console.error('API Error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n  return Promise.reject(error);\n});\n\n// Use selective mock data - only for failing endpoints\nconst useMockData = false;\n// Use mock data when server returns errors\nconst fallbackToMockOnError = true;\n\n// Keep track of mock users created during registration\nconst saveCreatedMockUser = (email, password, userData) => {\n  try {\n    // Get existing users or initialize empty array\n    const mockUsers = JSON.parse(localStorage.getItem('mockUsers') || '[]');\n\n    // Add new user credentials\n    mockUsers.push({\n      email,\n      password,\n      userData\n    });\n\n    // Save back to localStorage\n    localStorage.setItem('mockUsers', JSON.stringify(mockUsers));\n    console.log('Saved mock user for future login:', email);\n  } catch (e) {\n    console.error('Failed to save mock user:', e);\n  }\n};\n\n// Find a saved mock user\nconst findMockUser = (email, password) => {\n  try {\n    const mockUsers = JSON.parse(localStorage.getItem('mockUsers') || '[]');\n    return mockUsers.find(user => user.email === email && user.password === password);\n  } catch (e) {\n    console.error('Error checking for mock users:', e);\n    return null;\n  }\n};\n\n// Authentication API calls\nexport const register = async userData => {\n  try {\n    console.log('API: register called with', userData);\n    const response = await api.post('/api/auth/register', userData);\n    console.log('API: register response', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response3;\n    console.error('API: register error', error);\n\n    // Check if we should use mock data (either by default or as fallback)\n    if (useMockData || fallbackToMockOnError && ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) >= 500) {\n      console.log('API: Using mock data for register (server error fallback)');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // For mock data, allow registration with any email for testing\n      const mockResponse = {\n        token: 'mock-token-12345',\n        user: {\n          ...mockUser,\n          name: userData.name,\n          email: userData.email\n        }\n      };\n\n      // Save this mock user for future login attempts\n      saveCreatedMockUser(userData.email, userData.password, mockResponse.user);\n      console.log('API: mock register response', mockResponse);\n      return mockResponse;\n    }\n    throw error;\n  }\n};\nexport const login = async userData => {\n  try {\n    var _response$data$user;\n    console.log('API: login called with', userData);\n\n    // Check if this is a mock user created during registration\n    const mockUserMatch = findMockUser(userData.email, userData.password);\n    if (mockUserMatch) {\n      console.log('API: Found matching mock user, bypassing server login');\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n\n      // Return stored user data for the mock account\n      const mockResponse = {\n        token: 'mock-token-12345',\n        user: mockUserMatch.userData\n      };\n\n      // Store auth data for fallback\n      localStorage.setItem('auth', JSON.stringify({\n        email: userData.email,\n        name: mockUserMatch.userData.name\n      }));\n      console.log('API: mock login response for previously registered user', mockResponse);\n      return mockResponse;\n    }\n\n    // If not a mock user, try real server login\n    const response = await api.post('/api/auth/login', userData);\n    console.log('API: login response', response.data);\n\n    // Store auth data for fallback\n    localStorage.setItem('auth', JSON.stringify({\n      email: userData.email,\n      name: ((_response$data$user = response.data.user) === null || _response$data$user === void 0 ? void 0 : _response$data$user.name) || userData.email.split('@')[0]\n    }));\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    console.error('API: login error', error);\n\n    // Special handling for 401/403 status codes (authentication failures)\n    // Always reject invalid credentials, never fall back to mock for auth failures\n    if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n      console.log('API: Authentication failed, rejecting login attempt');\n      throw error;\n    }\n\n    // Check if we should use mock data as fallback\n    if (fallbackToMockOnError && ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) >= 500) {\n      console.log('API: Server error during login, checking if we can use mock data');\n\n      // Even in fallback mode, we should validate email format at minimum\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(userData.email) || !userData.password || userData.password.length < 6) {\n        console.log('API: Invalid credentials format, rejecting login attempt');\n        throw {\n          response: {\n            status: 401,\n            data: {\n              message: 'Invalid email format or password too short'\n            }\n          }\n        };\n      }\n\n      // Look for an existing user with this email in mock storage\n      // Only allow login if this email was previously registered\n      const mockUsers = JSON.parse(localStorage.getItem('mockUsers') || '[]');\n      const existingUser = mockUsers.find(user => user.email === userData.email);\n      if (!existingUser) {\n        console.log('API: No such user exists in mock data, rejecting login');\n        throw {\n          response: {\n            status: 401,\n            data: {\n              message: 'Invalid email or password'\n            }\n          }\n        };\n      } else if (existingUser.password !== userData.password) {\n        console.log('API: Password mismatch in mock data, rejecting login');\n        throw {\n          response: {\n            status: 401,\n            data: {\n              message: 'Invalid email or password'\n            }\n          }\n        };\n      }\n\n      // If we got here, the user exists in mock data and password is correct\n      console.log('API: Using fallback for login (server error fallback)');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Store auth data for fallback\n      localStorage.setItem('auth', JSON.stringify({\n        email: userData.email,\n        name: existingUser.userData.name || userData.email.split('@')[0]\n      }));\n\n      // For mock data, create a user based on the stored user data\n      const mockResponse = {\n        token: 'mock-token-12345',\n        user: existingUser.userData\n      };\n      console.log('API: mock login response', mockResponse);\n      return mockResponse;\n    }\n    throw error;\n  }\n};\n\n// User profile related API calls\nexport const getUserProfile = async () => {\n  try {\n    console.log('API: getUserProfile called');\n    const response = await api.get('/api/auth/me');\n    console.log('API: getUserProfile response', response.data);\n\n    // Store user data in localStorage for fallback\n    if (response.data) {\n      localStorage.setItem('user', JSON.stringify(response.data));\n    }\n    return response.data;\n  } catch (error) {\n    var _error$response5;\n    console.error('API: getUserProfile error', error);\n\n    // Check if we should use mock data as fallback\n    if (fallbackToMockOnError && ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) >= 500) {\n      console.log('API: Using fallback for getUserProfile (server error fallback)');\n\n      // Try to get stored user data first\n      const storedUser = localStorage.getItem('user');\n      if (storedUser) {\n        try {\n          const parsedUser = JSON.parse(storedUser);\n          console.log('API: using stored user data', parsedUser);\n          return parsedUser;\n        } catch (e) {\n          console.error('Error parsing stored user:', e);\n        }\n      }\n\n      // If no stored user, create a mock one\n      // Get email from localStorage if available\n      let userEmail = 'user@example.com';\n      let userName = 'User';\n      const storedAuth = localStorage.getItem('auth');\n      if (storedAuth) {\n        try {\n          const parsedAuth = JSON.parse(storedAuth);\n          userEmail = parsedAuth.email || userEmail;\n          userName = parsedAuth.name || userName;\n        } catch (e) {\n          console.error('Error parsing stored auth:', e);\n        }\n      }\n      const customMockUser = {\n        ...mockUser,\n        name: userName,\n        email: userEmail\n      };\n      console.log('API: mock getUserProfile response', customMockUser);\n      return customMockUser;\n    }\n    throw error;\n  }\n};\nexport const updateUserProfile = async profileData => {\n  try {\n    const response = await api.put('/api/users/profile', profileData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const updatedUser = {\n        ...mockUser,\n        ...profileData\n      };\n      return {\n        user: updatedUser\n      };\n    }\n    throw error;\n  }\n};\n\n// Children related API calls\nexport const getChildren = async () => {\n  try {\n    const response = await api.get('/api/users/children');\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return mockUser.children;\n    }\n    throw error;\n  }\n};\nexport const addChild = async childData => {\n  try {\n    const response = await api.post('/api/users/children', childData);\n    return response.data;\n  } catch (error) {\n    var _error$response6;\n    if (useMockData || fallbackToMockOnError && ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status) >= 500) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const newChild = {\n        _id: `child-${Date.now()}`,\n        ...childData\n      };\n\n      // Update user in localStorage with the new child\n      const storedUser = localStorage.getItem('user');\n      if (storedUser) {\n        try {\n          const parsedUser = JSON.parse(storedUser);\n          const updatedUser = {\n            ...parsedUser,\n            children: [...(parsedUser.children || []), newChild]\n          };\n\n          // Save the updated user data back to localStorage\n          localStorage.setItem('user', JSON.stringify(updatedUser));\n          console.log('Updated user in localStorage with new child:', newChild.name);\n        } catch (e) {\n          console.error('Error updating stored user with new child:', e);\n        }\n      }\n      return {\n        child: newChild\n      };\n    }\n    throw error;\n  }\n};\nexport const updateChild = async (childId, childData) => {\n  try {\n    const response = await api.put(`/api/users/children/${childId}`, childData);\n    return response.data;\n  } catch (error) {\n    var _error$response7;\n    if (useMockData || fallbackToMockOnError && ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.status) >= 500) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n\n      // Update child in localStorage too\n      const storedUser = localStorage.getItem('user');\n      if (storedUser) {\n        try {\n          const parsedUser = JSON.parse(storedUser);\n          if (parsedUser.children && parsedUser.children.length > 0) {\n            const updatedChildren = parsedUser.children.map(child => child._id === childId ? {\n              ...child,\n              ...childData\n            } : child);\n            const updatedUser = {\n              ...parsedUser,\n              children: updatedChildren\n            };\n\n            // Save the updated user data back to localStorage\n            localStorage.setItem('user', JSON.stringify(updatedUser));\n            console.log('Updated child in localStorage:', childId);\n            const updatedChild = updatedChildren.find(c => c._id === childId);\n            if (updatedChild) {\n              return {\n                child: updatedChild\n              };\n            }\n          }\n        } catch (e) {\n          console.error('Error updating child in localStorage:', e);\n        }\n      }\n\n      // Fallback to returning the updated child data directly\n      const updatedChild = {\n        _id: childId,\n        ...childData\n      };\n      return {\n        child: updatedChild\n      };\n    }\n    throw error;\n  }\n};\nexport const deleteChild = async childId => {\n  try {\n    const response = await api.delete(`/api/users/children/${childId}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const child = mockUser.children.find(c => c._id === childId);\n      if (!child) {\n        throw {\n          response: {\n            status: 404,\n            data: {\n              message: 'Child not found'\n            }\n          }\n        };\n      }\n      return {\n        success: true\n      };\n    }\n    throw error;\n  }\n};\n\n// Subscription related API calls\nexport const updateSubscription = async subscriptionData => {\n  try {\n    const response = await api.put('/api/users/subscription', subscriptionData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return {\n        subscription: subscriptionData.plan,\n        expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()\n      };\n    }\n    throw error;\n  }\n};\n\n// Activity related API calls\nexport const getActivities = async (params = {}) => {\n  try {\n    const response = await api.get('/api/activities', {\n      params\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response8;\n    console.error('API: getActivities error', error);\n\n    // Check if we should use mock data as fallback\n    if (fallbackToMockOnError && ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.status) >= 500) {\n      console.log('API: Using fallback for getActivities (server error fallback)');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n\n      // Filter activities based on params\n      let filteredActivities = [...mockActivities];\n      if (params.ageMin !== undefined && params.ageMax !== undefined) {\n        filteredActivities = filteredActivities.filter(activity => activity.ageRange.max >= params.ageMin && activity.ageRange.min <= params.ageMax);\n      }\n      if (params.limit) {\n        filteredActivities = filteredActivities.slice(0, params.limit);\n      }\n      return {\n        activities: filteredActivities,\n        total: mockActivities.length,\n        page: 1,\n        limit: params.limit || mockActivities.length\n      };\n    }\n    throw error;\n  }\n};\nexport const getActivityById = async id => {\n  try {\n    const response = await api.get(`/api/activities/${id}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      const activity = mockActivities.find(a => a._id === id);\n      if (!activity) {\n        throw {\n          response: {\n            status: 404,\n            data: {\n              message: 'Activity not found'\n            }\n          }\n        };\n      }\n      return activity;\n    }\n    throw error;\n  }\n};\n\n// Favorites related API calls\nexport const getFavorites = async () => {\n  try {\n    const response = await api.get('/api/users/favorites');\n    return response.data;\n  } catch (error) {\n    var _error$response9;\n    console.error('API: getFavorites error', error);\n\n    // Check if we should use mock data as fallback\n    if (fallbackToMockOnError && ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.status) >= 500) {\n      console.log('API: Using fallback for getFavorites (server error fallback)');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return mockFavorites;\n    }\n    throw error;\n  }\n};\nexport const addToFavorites = async activityId => {\n  try {\n    const response = await api.post('/api/users/favorites', {\n      activityId\n    });\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      const activity = mockActivities.find(a => a._id === activityId);\n      if (!activity) {\n        throw {\n          response: {\n            status: 404,\n            data: {\n              message: 'Activity not found'\n            }\n          }\n        };\n      }\n      return {\n        success: true,\n        activity\n      };\n    }\n    throw error;\n  }\n};\nexport const removeFromFavorites = async activityId => {\n  try {\n    const response = await api.delete(`/api/users/favorites/${activityId}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return {\n        success: true\n      };\n    }\n    throw error;\n  }\n};\n\n// Activity history related API calls\nexport const getActivityHistory = async () => {\n  try {\n    const response = await api.get('/api/users/activity-history');\n    return response.data;\n  } catch (error) {\n    var _error$response10;\n    console.error('API: getActivityHistory error', error);\n\n    // Check if we should use mock data as fallback\n    if (fallbackToMockOnError && ((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.status) >= 500) {\n      console.log('API: Using fallback for getActivityHistory (server error fallback)');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return mockHistory;\n    }\n    throw error;\n  }\n};\nexport const addToHistory = async (activityId, notes = null) => {\n  try {\n    const response = await api.post('/api/users/activity-history', {\n      activityId,\n      notes\n    });\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      const activity = mockActivities.find(a => a._id === activityId);\n      if (!activity) {\n        throw {\n          response: {\n            status: 404,\n            data: {\n              message: 'Activity not found'\n            }\n          }\n        };\n      }\n      const historyEntry = {\n        _id: `history-${Date.now()}`,\n        activity,\n        completedDate: new Date().toISOString(),\n        notes\n      };\n      return historyEntry;\n    }\n    throw error;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","mockUser","_id","name","email","subscription","subscriptionExpiry","Date","now","toISOString","children","birthdate","interests","developmentalFocus","mockActivities","title","description","images","timeRequired","ageRange","min","max","developmentalAreas","materials","steps","isPremium","mockFavorites","mockHistory","activity","completedDate","notes","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","_error$response","_error$response2","status","console","log","data","removeItem","message","useMockData","fallbackToMockOnError","saveCreatedMockUser","password","userData","mockUsers","JSON","parse","push","setItem","stringify","e","findMockUser","find","user","register","post","_error$response3","resolve","setTimeout","mockResponse","login","_response$data$user","mockUserMatch","split","_error$response4","emailRegex","test","length","existingUser","getUserProfile","get","_error$response5","storedUser","parsedUser","userEmail","userName","storedAuth","parsedAuth","customMockUser","updateUserProfile","profileData","put","updatedUser","getChildren","addChild","childData","_error$response6","newChild","child","updateChild","childId","_error$response7","updatedChildren","map","updatedChild","c","deleteChild","delete","success","updateSubscription","subscriptionData","plan","expiryDate","getActivities","params","_error$response8","filteredActivities","ageMin","undefined","ageMax","filter","limit","slice","activities","total","page","getActivityById","id","a","getFavorites","_error$response9","addToFavorites","activityId","removeFromFavorites","getActivityHistory","_error$response10","addToHistory","historyEntry"],"sources":["/home/kobus/mom-activities-app/client/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create a mock user for development\nconst mockUser = {\n  _id: 'user1',\n  name: 'Jane Smith',\n  email: 'jane@example.com',\n  subscription: 'premium',\n  subscriptionExpiry: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n  children: [\n    {\n      _id: 'child1',\n      name: 'Emma',\n      birthdate: new Date(Date.now() - 3 * 365 * 24 * 60 * 60 * 1000).toISOString(),\n      interests: ['animals', 'drawing', 'music'],\n      developmentalFocus: ['language', 'motor']\n    }\n  ]\n};\n\n// Mock activities\nconst mockActivities = [\n  {\n    _id: '1',\n    title: 'Sensory Water Play',\n    description: 'Develop fine motor skills and sensory exploration with water and various containers.',\n    images: ['https://images.unsplash.com/photo-1596464716127-f2a82984de30?w=500&auto=format&fit=crop'],\n    timeRequired: 20,\n    ageRange: { min: 1, max: 3 },\n    developmentalAreas: ['sensory', 'motor'],\n    materials: ['Water', 'Containers', 'Toys'],\n    steps: [\n      'Fill containers with water',\n      'Add toys and tools for exploration',\n      'Supervise play and encourage exploration'\n    ],\n    isPremium: false\n  },\n  {\n    _id: '2',\n    title: 'Color Sorting Game',\n    description: 'Learn colors and practice categorization with this simple sorting activity.',\n    images: ['https://images.unsplash.com/photo-1615147342761-9238e15d8b96?w=500&auto=format&fit=crop'],\n    timeRequired: 15,\n    ageRange: { min: 2, max: 4 },\n    developmentalAreas: ['cognitive', 'motor'],\n    materials: ['Colored objects', 'Sorting containers'],\n    steps: [\n      'Gather colored objects',\n      'Set up sorting containers',\n      'Demonstrate sorting by color',\n      'Let child practice sorting'\n    ],\n    isPremium: false\n  },\n  {\n    _id: '3',\n    title: 'DIY Musical Instruments',\n    description: 'Create simple instruments and explore rhythm, sound, and music concepts.',\n    images: ['https://images.unsplash.com/photo-1619379179326-c50977cd30fa?w=500&auto=format&fit=crop'],\n    timeRequired: 30,\n    ageRange: { min: 3, max: 6 },\n    developmentalAreas: ['creative', 'motor', 'cognitive'],\n    materials: ['Empty containers', 'Rice/beans', 'Rubber bands'],\n    steps: [\n      'Gather materials',\n      'Create shakers with containers and rice',\n      'Make string instruments with rubber bands',\n      'Explore different sounds'\n    ],\n    isPremium: false\n  }\n];\n\n// Mock favorites\nconst mockFavorites = [mockActivities[0], mockActivities[2]];\n\n// Mock history\nconst mockHistory = [\n  {\n    _id: 'history1',\n    activity: mockActivities[0],\n    completedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n    notes: 'Emma loved playing with the water colors!'\n  },\n  {\n    _id: 'history2',\n    activity: mockActivities[1],\n    completedDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n    notes: null\n  }\n];\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include the auth token in all requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    // Handle 401 Unauthorized errors (token expired or invalid)\n    if (error.response && error.response.status === 401) {\n      console.log('Authentication error detected:', error.response.data);\n      localStorage.removeItem('token');\n      // You could redirect to login page here or handle in the component\n    }\n    \n    // Log all API errors for debugging\n    console.error('API Error:', error.response?.status, error.response?.data || error.message);\n    \n    return Promise.reject(error);\n  }\n);\n\n// Use selective mock data - only for failing endpoints\nconst useMockData = false;\n// Use mock data when server returns errors\nconst fallbackToMockOnError = true;\n\n// Keep track of mock users created during registration\nconst saveCreatedMockUser = (email, password, userData) => {\n  try {\n    // Get existing users or initialize empty array\n    const mockUsers = JSON.parse(localStorage.getItem('mockUsers') || '[]');\n    \n    // Add new user credentials\n    mockUsers.push({\n      email,\n      password,\n      userData\n    });\n    \n    // Save back to localStorage\n    localStorage.setItem('mockUsers', JSON.stringify(mockUsers));\n    console.log('Saved mock user for future login:', email);\n  } catch (e) {\n    console.error('Failed to save mock user:', e);\n  }\n};\n\n// Find a saved mock user\nconst findMockUser = (email, password) => {\n  try {\n    const mockUsers = JSON.parse(localStorage.getItem('mockUsers') || '[]');\n    return mockUsers.find(user => user.email === email && user.password === password);\n  } catch (e) {\n    console.error('Error checking for mock users:', e);\n    return null;\n  }\n};\n\n// Authentication API calls\nexport const register = async (userData) => {\n  try {\n    console.log('API: register called with', userData);\n    const response = await api.post('/api/auth/register', userData);\n    console.log('API: register response', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('API: register error', error);\n    \n    // Check if we should use mock data (either by default or as fallback)\n    if (useMockData || (fallbackToMockOnError && error.response?.status >= 500)) {\n      console.log('API: Using mock data for register (server error fallback)');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // For mock data, allow registration with any email for testing\n      const mockResponse = {\n        token: 'mock-token-12345',\n        user: {\n          ...mockUser,\n          name: userData.name,\n          email: userData.email\n        }\n      };\n      \n      // Save this mock user for future login attempts\n      saveCreatedMockUser(userData.email, userData.password, mockResponse.user);\n      \n      console.log('API: mock register response', mockResponse);\n      return mockResponse;\n    }\n    \n    throw error;\n  }\n};\n\nexport const login = async (userData) => {\n  try {\n    console.log('API: login called with', userData);\n    \n    // Check if this is a mock user created during registration\n    const mockUserMatch = findMockUser(userData.email, userData.password);\n    if (mockUserMatch) {\n      console.log('API: Found matching mock user, bypassing server login');\n      \n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      // Return stored user data for the mock account\n      const mockResponse = {\n        token: 'mock-token-12345',\n        user: mockUserMatch.userData\n      };\n      \n      // Store auth data for fallback\n      localStorage.setItem('auth', JSON.stringify({\n        email: userData.email,\n        name: mockUserMatch.userData.name\n      }));\n      \n      console.log('API: mock login response for previously registered user', mockResponse);\n      return mockResponse;\n    }\n    \n    // If not a mock user, try real server login\n    const response = await api.post('/api/auth/login', userData);\n    console.log('API: login response', response.data);\n    \n    // Store auth data for fallback\n    localStorage.setItem('auth', JSON.stringify({\n      email: userData.email,\n      name: response.data.user?.name || userData.email.split('@')[0]\n    }));\n    \n    return response.data;\n  } catch (error) {\n    console.error('API: login error', error);\n    \n    // Special handling for 401/403 status codes (authentication failures)\n    // Always reject invalid credentials, never fall back to mock for auth failures\n    if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n      console.log('API: Authentication failed, rejecting login attempt');\n      throw error;\n    }\n    \n    // Check if we should use mock data as fallback\n    if (fallbackToMockOnError && error.response?.status >= 500) {\n      console.log('API: Server error during login, checking if we can use mock data');\n      \n      // Even in fallback mode, we should validate email format at minimum\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(userData.email) || !userData.password || userData.password.length < 6) {\n        console.log('API: Invalid credentials format, rejecting login attempt');\n        throw { \n          response: { \n            status: 401, \n            data: { message: 'Invalid email format or password too short' } \n          } \n        };\n      }\n      \n      // Look for an existing user with this email in mock storage\n      // Only allow login if this email was previously registered\n      const mockUsers = JSON.parse(localStorage.getItem('mockUsers') || '[]');\n      const existingUser = mockUsers.find(user => user.email === userData.email);\n      \n      if (!existingUser) {\n        console.log('API: No such user exists in mock data, rejecting login');\n        throw { \n          response: { \n            status: 401, \n            data: { message: 'Invalid email or password' } \n          } \n        };\n      } else if (existingUser.password !== userData.password) {\n        console.log('API: Password mismatch in mock data, rejecting login');\n        throw { \n          response: { \n            status: 401, \n            data: { message: 'Invalid email or password' } \n          } \n        };\n      }\n      \n      // If we got here, the user exists in mock data and password is correct\n      console.log('API: Using fallback for login (server error fallback)');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Store auth data for fallback\n      localStorage.setItem('auth', JSON.stringify({\n        email: userData.email,\n        name: existingUser.userData.name || userData.email.split('@')[0]\n      }));\n      \n      // For mock data, create a user based on the stored user data\n      const mockResponse = {\n        token: 'mock-token-12345',\n        user: existingUser.userData\n      };\n      console.log('API: mock login response', mockResponse);\n      return mockResponse;\n    }\n    \n    throw error;\n  }\n};\n\n// User profile related API calls\nexport const getUserProfile = async () => {\n  try {\n    console.log('API: getUserProfile called');\n    const response = await api.get('/api/auth/me');\n    console.log('API: getUserProfile response', response.data);\n    \n    // Store user data in localStorage for fallback\n    if (response.data) {\n      localStorage.setItem('user', JSON.stringify(response.data));\n    }\n    \n    return response.data;\n  } catch (error) {\n    console.error('API: getUserProfile error', error);\n    \n    // Check if we should use mock data as fallback\n    if (fallbackToMockOnError && error.response?.status >= 500) {\n      console.log('API: Using fallback for getUserProfile (server error fallback)');\n      \n      // Try to get stored user data first\n      const storedUser = localStorage.getItem('user');\n      if (storedUser) {\n        try {\n          const parsedUser = JSON.parse(storedUser);\n          console.log('API: using stored user data', parsedUser);\n          return parsedUser;\n        } catch (e) {\n          console.error('Error parsing stored user:', e);\n        }\n      }\n      \n      // If no stored user, create a mock one\n      // Get email from localStorage if available\n      let userEmail = 'user@example.com';\n      let userName = 'User';\n      \n      const storedAuth = localStorage.getItem('auth');\n      if (storedAuth) {\n        try {\n          const parsedAuth = JSON.parse(storedAuth);\n          userEmail = parsedAuth.email || userEmail;\n          userName = parsedAuth.name || userName;\n        } catch (e) {\n          console.error('Error parsing stored auth:', e);\n        }\n      }\n      \n      const customMockUser = {\n        ...mockUser,\n        name: userName,\n        email: userEmail\n      };\n      \n      console.log('API: mock getUserProfile response', customMockUser);\n      return customMockUser;\n    }\n    \n    throw error;\n  }\n};\n\nexport const updateUserProfile = async (profileData) => {\n  try {\n    const response = await api.put('/api/users/profile', profileData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const updatedUser = {\n        ...mockUser,\n        ...profileData\n      };\n      \n      return { user: updatedUser };\n    }\n    throw error;\n  }\n};\n\n// Children related API calls\nexport const getChildren = async () => {\n  try {\n    const response = await api.get('/api/users/children');\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return mockUser.children;\n    }\n    throw error;\n  }\n};\n\nexport const addChild = async (childData) => {\n  try {\n    const response = await api.post('/api/users/children', childData);\n    return response.data;\n  } catch (error) {\n    if (useMockData || (fallbackToMockOnError && error.response?.status >= 500)) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const newChild = {\n        _id: `child-${Date.now()}`,\n        ...childData\n      };\n      \n      // Update user in localStorage with the new child\n      const storedUser = localStorage.getItem('user');\n      if (storedUser) {\n        try {\n          const parsedUser = JSON.parse(storedUser);\n          const updatedUser = {\n            ...parsedUser,\n            children: [...(parsedUser.children || []), newChild]\n          };\n          \n          // Save the updated user data back to localStorage\n          localStorage.setItem('user', JSON.stringify(updatedUser));\n          console.log('Updated user in localStorage with new child:', newChild.name);\n        } catch (e) {\n          console.error('Error updating stored user with new child:', e);\n        }\n      }\n      \n      return { child: newChild };\n    }\n    throw error;\n  }\n};\n\nexport const updateChild = async (childId, childData) => {\n  try {\n    const response = await api.put(`/api/users/children/${childId}`, childData);\n    return response.data;\n  } catch (error) {\n    if (useMockData || (fallbackToMockOnError && error.response?.status >= 500)) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      // Update child in localStorage too\n      const storedUser = localStorage.getItem('user');\n      if (storedUser) {\n        try {\n          const parsedUser = JSON.parse(storedUser);\n          \n          if (parsedUser.children && parsedUser.children.length > 0) {\n            const updatedChildren = parsedUser.children.map(child => \n              child._id === childId ? { ...child, ...childData } : child\n            );\n            \n            const updatedUser = {\n              ...parsedUser,\n              children: updatedChildren\n            };\n            \n            // Save the updated user data back to localStorage\n            localStorage.setItem('user', JSON.stringify(updatedUser));\n            console.log('Updated child in localStorage:', childId);\n            \n            const updatedChild = updatedChildren.find(c => c._id === childId);\n            if (updatedChild) {\n              return { child: updatedChild };\n            }\n          }\n        } catch (e) {\n          console.error('Error updating child in localStorage:', e);\n        }\n      }\n      \n      // Fallback to returning the updated child data directly\n      const updatedChild = {\n        _id: childId,\n        ...childData\n      };\n      \n      return { child: updatedChild };\n    }\n    throw error;\n  }\n};\n\nexport const deleteChild = async (childId) => {\n  try {\n    const response = await api.delete(`/api/users/children/${childId}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const child = mockUser.children.find(c => c._id === childId);\n      if (!child) {\n        throw { response: { status: 404, data: { message: 'Child not found' } } };\n      }\n      \n      return { success: true };\n    }\n    throw error;\n  }\n};\n\n// Subscription related API calls\nexport const updateSubscription = async (subscriptionData) => {\n  try {\n    const response = await api.put('/api/users/subscription', subscriptionData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      return {\n        subscription: subscriptionData.plan,\n        expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()\n      };\n    }\n    throw error;\n  }\n};\n\n// Activity related API calls\nexport const getActivities = async (params = {}) => {\n  try {\n    const response = await api.get('/api/activities', { params });\n    return response.data;\n  } catch (error) {\n    console.error('API: getActivities error', error);\n    \n    // Check if we should use mock data as fallback\n    if (fallbackToMockOnError && error.response?.status >= 500) {\n      console.log('API: Using fallback for getActivities (server error fallback)');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      // Filter activities based on params\n      let filteredActivities = [...mockActivities];\n      \n      if (params.ageMin !== undefined && params.ageMax !== undefined) {\n        filteredActivities = filteredActivities.filter(activity => \n          activity.ageRange.max >= params.ageMin && activity.ageRange.min <= params.ageMax\n        );\n      }\n      \n      if (params.limit) {\n        filteredActivities = filteredActivities.slice(0, params.limit);\n      }\n      \n      return {\n        activities: filteredActivities,\n        total: mockActivities.length,\n        page: 1,\n        limit: params.limit || mockActivities.length\n      };\n    }\n    \n    throw error;\n  }\n};\n\nexport const getActivityById = async (id) => {\n  try {\n    const response = await api.get(`/api/activities/${id}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      \n      const activity = mockActivities.find(a => a._id === id);\n      if (!activity) {\n        throw { response: { status: 404, data: { message: 'Activity not found' } } };\n      }\n      \n      return activity;\n    }\n    throw error;\n  }\n};\n\n// Favorites related API calls\nexport const getFavorites = async () => {\n  try {\n    const response = await api.get('/api/users/favorites');\n    return response.data;\n  } catch (error) {\n    console.error('API: getFavorites error', error);\n    \n    // Check if we should use mock data as fallback\n    if (fallbackToMockOnError && error.response?.status >= 500) {\n      console.log('API: Using fallback for getFavorites (server error fallback)');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return mockFavorites;\n    }\n    \n    throw error;\n  }\n};\n\nexport const addToFavorites = async (activityId) => {\n  try {\n    const response = await api.post('/api/users/favorites', { activityId });\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      \n      const activity = mockActivities.find(a => a._id === activityId);\n      if (!activity) {\n        throw { response: { status: 404, data: { message: 'Activity not found' } } };\n      }\n      \n      return { success: true, activity };\n    }\n    throw error;\n  }\n};\n\nexport const removeFromFavorites = async (activityId) => {\n  try {\n    const response = await api.delete(`/api/users/favorites/${activityId}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return { success: true };\n    }\n    throw error;\n  }\n};\n\n// Activity history related API calls\nexport const getActivityHistory = async () => {\n  try {\n    const response = await api.get('/api/users/activity-history');\n    return response.data;\n  } catch (error) {\n    console.error('API: getActivityHistory error', error);\n    \n    // Check if we should use mock data as fallback\n    if (fallbackToMockOnError && error.response?.status >= 500) {\n      console.log('API: Using fallback for getActivityHistory (server error fallback)');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return mockHistory;\n    }\n    \n    throw error;\n  }\n};\n\nexport const addToHistory = async (activityId, notes = null) => {\n  try {\n    const response = await api.post('/api/users/activity-history', { activityId, notes });\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      \n      const activity = mockActivities.find(a => a._id === activityId);\n      if (!activity) {\n        throw { response: { status: 404, data: { message: 'Activity not found' } } };\n      }\n      \n      const historyEntry = {\n        _id: `history-${Date.now()}`,\n        activity,\n        completedDate: new Date().toISOString(),\n        notes\n      };\n      \n      return historyEntry;\n    }\n    throw error;\n  }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}