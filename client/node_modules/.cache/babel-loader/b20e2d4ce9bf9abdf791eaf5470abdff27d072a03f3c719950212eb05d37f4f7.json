{"ast":null,"code":"import axios from 'axios';\n\n// Create a mock user for development\nconst mockUser = {\n  _id: 'user1',\n  name: 'Jane Smith',\n  email: 'jane@example.com',\n  subscription: 'premium',\n  subscriptionExpiry: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n  children: [{\n    _id: 'child1',\n    name: 'Emma',\n    birthdate: new Date(Date.now() - 3 * 365 * 24 * 60 * 60 * 1000).toISOString(),\n    interests: ['animals', 'drawing', 'music'],\n    developmentalFocus: ['language', 'motor']\n  }]\n};\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include the auth token in all requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // Handle 401 Unauthorized errors (token expired or invalid)\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem('token');\n    // You could redirect to login page here or handle in the component\n  }\n  return Promise.reject(error);\n});\n\n// Use mock data if API calls fail\nconst useMockData = true;\n\n// Authentication API calls\nexport const register = async userData => {\n  try {\n    console.log('API: register called with', userData);\n    const response = await api.post('/api/auth/register', userData);\n    console.log('API: register response', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('API: register error', error);\n    if (useMockData) {\n      console.log('API: Using mock data for register');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Check if email already exists\n      if (userData.email === mockUser.email) {\n        throw {\n          response: {\n            data: {\n              message: 'Email already in use'\n            }\n          }\n        };\n      }\n\n      // Return mock response\n      const mockResponse = {\n        token: 'mock-token-12345',\n        user: {\n          ...mockUser,\n          name: userData.name,\n          email: userData.email\n        }\n      };\n      console.log('API: mock register response', mockResponse);\n      return mockResponse;\n    }\n    throw error;\n  }\n};\nexport const login = async userData => {\n  try {\n    console.log('API: login called with', userData);\n    const response = await api.post('/api/auth/login', userData);\n    console.log('API: login response', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('API: login error', error);\n    if (useMockData) {\n      console.log('API: Using mock data for login');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Check credentials (very simple mock)\n      if (userData.email === mockUser.email && userData.password === 'password') {\n        const mockResponse = {\n          token: 'mock-token-12345',\n          user: mockUser\n        };\n        console.log('API: mock login response', mockResponse);\n        return mockResponse;\n      } else {\n        throw {\n          response: {\n            data: {\n              message: 'Invalid credentials'\n            }\n          }\n        };\n      }\n    }\n    throw error;\n  }\n};\n\n// User profile related API calls\nexport const getUserProfile = async () => {\n  try {\n    console.log('API: getUserProfile called');\n    const response = await api.get('/api/auth/me');\n    console.log('API: getUserProfile response', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('API: getUserProfile error', error);\n    if (useMockData) {\n      console.log('API: Using mock data for getUserProfile');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      console.log('API: mock getUserProfile response', mockUser);\n      return mockUser;\n    }\n    throw error;\n  }\n};\nexport const updateUserProfile = async profileData => {\n  try {\n    const response = await api.put('/api/users/profile', profileData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const updatedUser = {\n        ...mockUser,\n        ...profileData\n      };\n      return {\n        user: updatedUser\n      };\n    }\n    throw error;\n  }\n};\n\n// Children related API calls\nexport const addChild = async childData => {\n  try {\n    const response = await api.post('/api/users/children', childData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const newChild = {\n        _id: `child-${Date.now()}`,\n        ...childData\n      };\n      return {\n        child: newChild\n      };\n    }\n    throw error;\n  }\n};\nexport const updateChild = async (childId, childData) => {\n  try {\n    const response = await api.put(`/api/users/children/${childId}`, childData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const child = mockUser.children.find(c => c._id === childId);\n      if (!child) {\n        throw {\n          response: {\n            status: 404,\n            data: {\n              message: 'Child not found'\n            }\n          }\n        };\n      }\n      const updatedChild = {\n        ...child,\n        ...childData\n      };\n      return {\n        child: updatedChild\n      };\n    }\n    throw error;\n  }\n};\nexport const deleteChild = async childId => {\n  try {\n    const response = await api.delete(`/api/users/children/${childId}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const child = mockUser.children.find(c => c._id === childId);\n      if (!child) {\n        throw {\n          response: {\n            status: 404,\n            data: {\n              message: 'Child not found'\n            }\n          }\n        };\n      }\n      return {\n        success: true\n      };\n    }\n    throw error;\n  }\n};\n\n// Subscription related API calls\nexport const updateSubscription = async subscriptionData => {\n  try {\n    const response = await api.put('/api/users/subscription', subscriptionData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return {\n        subscription: subscriptionData.plan,\n        expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()\n      };\n    }\n    throw error;\n  }\n};\n\n// Activity related API calls\nexport const getActivities = async (params = {}) => {\n  try {\n    const response = await api.get('/api/activities', {\n      params\n    });\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return {\n        activities: [],\n        total: 0,\n        page: 1,\n        limit: params.limit || 10\n      };\n    }\n    throw error;\n  }\n};\n\n// Favorites related API calls\nexport const getFavorites = async () => {\n  try {\n    const response = await api.get('/api/users/favorites');\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return [];\n    }\n    throw error;\n  }\n};\nexport const addToFavorites = async activityId => {\n  try {\n    const response = await api.post('/api/users/favorites', {\n      activityId\n    });\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return {\n        success: true\n      };\n    }\n    throw error;\n  }\n};\nexport const removeFromFavorites = async activityId => {\n  try {\n    const response = await api.delete(`/api/users/favorites/${activityId}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return {\n        success: true\n      };\n    }\n    throw error;\n  }\n};\n\n// Activity history related API calls\nexport const getActivityHistory = async () => {\n  try {\n    const response = await api.get('/api/users/activity-history');\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return [];\n    }\n    throw error;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","mockUser","_id","name","email","subscription","subscriptionExpiry","Date","now","toISOString","children","birthdate","interests","developmentalFocus","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","status","removeItem","useMockData","register","userData","console","log","post","data","resolve","setTimeout","message","mockResponse","user","login","password","getUserProfile","get","updateUserProfile","profileData","put","updatedUser","addChild","childData","newChild","child","updateChild","childId","find","c","updatedChild","deleteChild","delete","success","updateSubscription","subscriptionData","plan","expiryDate","getActivities","params","activities","total","page","limit","getFavorites","addToFavorites","activityId","removeFromFavorites","getActivityHistory"],"sources":["/home/kobus/mom-activities-app/client/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create a mock user for development\nconst mockUser = {\n  _id: 'user1',\n  name: 'Jane Smith',\n  email: 'jane@example.com',\n  subscription: 'premium',\n  subscriptionExpiry: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n  children: [\n    {\n      _id: 'child1',\n      name: 'Emma',\n      birthdate: new Date(Date.now() - 3 * 365 * 24 * 60 * 60 * 1000).toISOString(),\n      interests: ['animals', 'drawing', 'music'],\n      developmentalFocus: ['language', 'motor']\n    }\n  ]\n};\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include the auth token in all requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    // Handle 401 Unauthorized errors (token expired or invalid)\n    if (error.response && error.response.status === 401) {\n      localStorage.removeItem('token');\n      // You could redirect to login page here or handle in the component\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Use mock data if API calls fail\nconst useMockData = true;\n\n// Authentication API calls\nexport const register = async (userData) => {\n  try {\n    console.log('API: register called with', userData);\n    const response = await api.post('/api/auth/register', userData);\n    console.log('API: register response', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('API: register error', error);\n    if (useMockData) {\n      console.log('API: Using mock data for register');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Check if email already exists\n      if (userData.email === mockUser.email) {\n        throw { response: { data: { message: 'Email already in use' } } };\n      }\n      \n      // Return mock response\n      const mockResponse = {\n        token: 'mock-token-12345',\n        user: {\n          ...mockUser,\n          name: userData.name,\n          email: userData.email\n        }\n      };\n      console.log('API: mock register response', mockResponse);\n      return mockResponse;\n    }\n    throw error;\n  }\n};\n\nexport const login = async (userData) => {\n  try {\n    console.log('API: login called with', userData);\n    const response = await api.post('/api/auth/login', userData);\n    console.log('API: login response', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('API: login error', error);\n    if (useMockData) {\n      console.log('API: Using mock data for login');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Check credentials (very simple mock)\n      if (userData.email === mockUser.email && userData.password === 'password') {\n        const mockResponse = {\n          token: 'mock-token-12345',\n          user: mockUser\n        };\n        console.log('API: mock login response', mockResponse);\n        return mockResponse;\n      } else {\n        throw { response: { data: { message: 'Invalid credentials' } } };\n      }\n    }\n    throw error;\n  }\n};\n\n// User profile related API calls\nexport const getUserProfile = async () => {\n  try {\n    console.log('API: getUserProfile called');\n    const response = await api.get('/api/auth/me');\n    console.log('API: getUserProfile response', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('API: getUserProfile error', error);\n    if (useMockData) {\n      console.log('API: Using mock data for getUserProfile');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      console.log('API: mock getUserProfile response', mockUser);\n      return mockUser;\n    }\n    throw error;\n  }\n};\n\nexport const updateUserProfile = async (profileData) => {\n  try {\n    const response = await api.put('/api/users/profile', profileData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const updatedUser = {\n        ...mockUser,\n        ...profileData\n      };\n      \n      return { user: updatedUser };\n    }\n    throw error;\n  }\n};\n\n// Children related API calls\nexport const addChild = async (childData) => {\n  try {\n    const response = await api.post('/api/users/children', childData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const newChild = {\n        _id: `child-${Date.now()}`,\n        ...childData\n      };\n      \n      return { child: newChild };\n    }\n    throw error;\n  }\n};\n\nexport const updateChild = async (childId, childData) => {\n  try {\n    const response = await api.put(`/api/users/children/${childId}`, childData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const child = mockUser.children.find(c => c._id === childId);\n      if (!child) {\n        throw { response: { status: 404, data: { message: 'Child not found' } } };\n      }\n      \n      const updatedChild = {\n        ...child,\n        ...childData\n      };\n      \n      return { child: updatedChild };\n    }\n    throw error;\n  }\n};\n\nexport const deleteChild = async (childId) => {\n  try {\n    const response = await api.delete(`/api/users/children/${childId}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const child = mockUser.children.find(c => c._id === childId);\n      if (!child) {\n        throw { response: { status: 404, data: { message: 'Child not found' } } };\n      }\n      \n      return { success: true };\n    }\n    throw error;\n  }\n};\n\n// Subscription related API calls\nexport const updateSubscription = async (subscriptionData) => {\n  try {\n    const response = await api.put('/api/users/subscription', subscriptionData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      return {\n        subscription: subscriptionData.plan,\n        expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()\n      };\n    }\n    throw error;\n  }\n};\n\n// Activity related API calls\nexport const getActivities = async (params = {}) => {\n  try {\n    const response = await api.get('/api/activities', { params });\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      return {\n        activities: [],\n        total: 0,\n        page: 1,\n        limit: params.limit || 10\n      };\n    }\n    throw error;\n  }\n};\n\n// Favorites related API calls\nexport const getFavorites = async () => {\n  try {\n    const response = await api.get('/api/users/favorites');\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return [];\n    }\n    throw error;\n  }\n};\n\nexport const addToFavorites = async (activityId) => {\n  try {\n    const response = await api.post('/api/users/favorites', { activityId });\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return { success: true };\n    }\n    throw error;\n  }\n};\n\nexport const removeFromFavorites = async (activityId) => {\n  try {\n    const response = await api.delete(`/api/users/favorites/${activityId}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return { success: true };\n    }\n    throw error;\n  }\n};\n\n// Activity history related API calls\nexport const getActivityHistory = async () => {\n  try {\n    const response = await api.get('/api/users/activity-history');\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return [];\n    }\n    throw error;\n  }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}