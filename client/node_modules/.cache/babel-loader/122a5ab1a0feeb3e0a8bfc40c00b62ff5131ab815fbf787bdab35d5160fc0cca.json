{"ast":null,"code":"import axios from 'axios';\n\n// Create a mock user for development\nconst mockUser = {\n  _id: 'user1',\n  name: 'Jane Smith',\n  email: 'jane@example.com',\n  subscription: 'premium',\n  subscriptionExpiry: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n  children: [{\n    _id: 'child1',\n    name: 'Emma',\n    birthdate: new Date(Date.now() - 3 * 365 * 24 * 60 * 60 * 1000).toISOString(),\n    interests: ['animals', 'drawing', 'music'],\n    developmentalFocus: ['language', 'motor']\n  }]\n};\n\n// Mock activities\nconst mockActivities = [{\n  _id: '1',\n  title: 'Sensory Water Play',\n  description: 'Develop fine motor skills and sensory exploration with water and various containers.',\n  images: ['https://images.unsplash.com/photo-1596464716127-f2a82984de30?w=500&auto=format&fit=crop'],\n  timeRequired: 20,\n  ageRange: {\n    min: 1,\n    max: 3\n  },\n  developmentalAreas: ['sensory', 'motor'],\n  materials: ['Water', 'Containers', 'Toys'],\n  steps: ['Fill containers with water', 'Add toys and tools for exploration', 'Supervise play and encourage exploration'],\n  isPremium: false\n}, {\n  _id: '2',\n  title: 'Color Sorting Game',\n  description: 'Learn colors and practice categorization with this simple sorting activity.',\n  images: ['https://images.unsplash.com/photo-1615147342761-9238e15d8b96?w=500&auto=format&fit=crop'],\n  timeRequired: 15,\n  ageRange: {\n    min: 2,\n    max: 4\n  },\n  developmentalAreas: ['cognitive', 'motor'],\n  materials: ['Colored objects', 'Sorting containers'],\n  steps: ['Gather colored objects', 'Set up sorting containers', 'Demonstrate sorting by color', 'Let child practice sorting'],\n  isPremium: false\n}, {\n  _id: '3',\n  title: 'DIY Musical Instruments',\n  description: 'Create simple instruments and explore rhythm, sound, and music concepts.',\n  images: ['https://images.unsplash.com/photo-1619379179326-c50977cd30fa?w=500&auto=format&fit=crop'],\n  timeRequired: 30,\n  ageRange: {\n    min: 3,\n    max: 6\n  },\n  developmentalAreas: ['creative', 'motor', 'cognitive'],\n  materials: ['Empty containers', 'Rice/beans', 'Rubber bands'],\n  steps: ['Gather materials', 'Create shakers with containers and rice', 'Make string instruments with rubber bands', 'Explore different sounds'],\n  isPremium: false\n}];\n\n// Mock favorites\nconst mockFavorites = [mockActivities[0], mockActivities[2]];\n\n// Mock history\nconst mockHistory = [{\n  _id: 'history1',\n  activity: mockActivities[0],\n  completedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n  notes: 'Emma loved playing with the water colors!'\n}, {\n  _id: 'history2',\n  activity: mockActivities[1],\n  completedDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n  notes: null\n}];\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include the auth token in all requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // Handle 401 Unauthorized errors (token expired or invalid)\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem('token');\n    // You could redirect to login page here or handle in the component\n  }\n  return Promise.reject(error);\n});\n\n// Use mock data for all API calls\nconst useMockData = true;\n\n// Authentication API calls\nexport const register = async userData => {\n  try {\n    console.log('API: register called with', userData);\n    const response = await api.post('/api/auth/register', userData);\n    console.log('API: register response', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('API: register error', error);\n    if (useMockData) {\n      console.log('API: Using mock data for register');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Check if email already exists\n      if (userData.email === mockUser.email) {\n        throw {\n          response: {\n            data: {\n              message: 'Email already in use'\n            }\n          }\n        };\n      }\n\n      // Return mock response\n      const mockResponse = {\n        token: 'mock-token-12345',\n        user: {\n          ...mockUser,\n          name: userData.name,\n          email: userData.email\n        }\n      };\n      console.log('API: mock register response', mockResponse);\n      return mockResponse;\n    }\n    throw error;\n  }\n};\nexport const login = async userData => {\n  try {\n    console.log('API: login called with', userData);\n    const response = await api.post('/api/auth/login', userData);\n    console.log('API: login response', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('API: login error', error);\n    if (useMockData) {\n      console.log('API: Using mock data for login');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Check credentials (very simple mock)\n      if (userData.email === mockUser.email && userData.password === 'password') {\n        const mockResponse = {\n          token: 'mock-token-12345',\n          user: mockUser\n        };\n        console.log('API: mock login response', mockResponse);\n        return mockResponse;\n      } else {\n        throw {\n          response: {\n            data: {\n              message: 'Invalid credentials'\n            }\n          }\n        };\n      }\n    }\n    throw error;\n  }\n};\n\n// User profile related API calls\nexport const getUserProfile = async () => {\n  try {\n    console.log('API: getUserProfile called');\n    const response = await api.get('/api/auth/me');\n    console.log('API: getUserProfile response', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('API: getUserProfile error', error);\n    if (useMockData) {\n      console.log('API: Using mock data for getUserProfile');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      console.log('API: mock getUserProfile response', mockUser);\n      return mockUser;\n    }\n    throw error;\n  }\n};\nexport const updateUserProfile = async profileData => {\n  try {\n    const response = await api.put('/api/users/profile', profileData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const updatedUser = {\n        ...mockUser,\n        ...profileData\n      };\n      return {\n        user: updatedUser\n      };\n    }\n    throw error;\n  }\n};\n\n// Children related API calls\nexport const getChildren = async () => {\n  try {\n    const response = await api.get('/api/users/children');\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return mockUser.children;\n    }\n    throw error;\n  }\n};\nexport const addChild = async childData => {\n  try {\n    const response = await api.post('/api/users/children', childData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const newChild = {\n        _id: `child-${Date.now()}`,\n        ...childData\n      };\n      return {\n        child: newChild\n      };\n    }\n    throw error;\n  }\n};\nexport const updateChild = async (childId, childData) => {\n  try {\n    const response = await api.put(`/api/users/children/${childId}`, childData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const child = mockUser.children.find(c => c._id === childId);\n      if (!child) {\n        throw {\n          response: {\n            status: 404,\n            data: {\n              message: 'Child not found'\n            }\n          }\n        };\n      }\n      const updatedChild = {\n        ...child,\n        ...childData\n      };\n      return {\n        child: updatedChild\n      };\n    }\n    throw error;\n  }\n};\nexport const deleteChild = async childId => {\n  try {\n    const response = await api.delete(`/api/users/children/${childId}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const child = mockUser.children.find(c => c._id === childId);\n      if (!child) {\n        throw {\n          response: {\n            status: 404,\n            data: {\n              message: 'Child not found'\n            }\n          }\n        };\n      }\n      return {\n        success: true\n      };\n    }\n    throw error;\n  }\n};\n\n// Subscription related API calls\nexport const updateSubscription = async subscriptionData => {\n  try {\n    const response = await api.put('/api/users/subscription', subscriptionData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return {\n        subscription: subscriptionData.plan,\n        expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()\n      };\n    }\n    throw error;\n  }\n};\n\n// Activity related API calls\nexport const getActivities = async (params = {}) => {\n  try {\n    const response = await api.get('/api/activities', {\n      params\n    });\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n\n      // Filter activities based on params\n      let filteredActivities = [...mockActivities];\n      if (params.ageMin !== undefined && params.ageMax !== undefined) {\n        filteredActivities = filteredActivities.filter(activity => activity.ageRange.max >= params.ageMin && activity.ageRange.min <= params.ageMax);\n      }\n      if (params.limit) {\n        filteredActivities = filteredActivities.slice(0, params.limit);\n      }\n      return {\n        activities: filteredActivities,\n        total: mockActivities.length,\n        page: 1,\n        limit: params.limit || mockActivities.length\n      };\n    }\n    throw error;\n  }\n};\nexport const getActivityById = async id => {\n  try {\n    const response = await api.get(`/api/activities/${id}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      const activity = mockActivities.find(a => a._id === id);\n      if (!activity) {\n        throw {\n          response: {\n            status: 404,\n            data: {\n              message: 'Activity not found'\n            }\n          }\n        };\n      }\n      return activity;\n    }\n    throw error;\n  }\n};\n\n// Favorites related API calls\nexport const getFavorites = async () => {\n  try {\n    const response = await api.get('/api/users/favorites');\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return mockFavorites;\n    }\n    throw error;\n  }\n};\nexport const addToFavorites = async activityId => {\n  try {\n    const response = await api.post('/api/users/favorites', {\n      activityId\n    });\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      const activity = mockActivities.find(a => a._id === activityId);\n      if (!activity) {\n        throw {\n          response: {\n            status: 404,\n            data: {\n              message: 'Activity not found'\n            }\n          }\n        };\n      }\n      return {\n        success: true,\n        activity\n      };\n    }\n    throw error;\n  }\n};\nexport const removeFromFavorites = async activityId => {\n  try {\n    const response = await api.delete(`/api/users/favorites/${activityId}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return {\n        success: true\n      };\n    }\n    throw error;\n  }\n};\n\n// Activity history related API calls\nexport const getActivityHistory = async () => {\n  try {\n    const response = await api.get('/api/users/activity-history');\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return mockHistory;\n    }\n    throw error;\n  }\n};\nexport const addToHistory = async (activityId, notes = null) => {\n  try {\n    const response = await api.post('/api/users/activity-history', {\n      activityId,\n      notes\n    });\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      const activity = mockActivities.find(a => a._id === activityId);\n      if (!activity) {\n        throw {\n          response: {\n            status: 404,\n            data: {\n              message: 'Activity not found'\n            }\n          }\n        };\n      }\n      const historyEntry = {\n        _id: `history-${Date.now()}`,\n        activity,\n        completedDate: new Date().toISOString(),\n        notes\n      };\n      return historyEntry;\n    }\n    throw error;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","mockUser","_id","name","email","subscription","subscriptionExpiry","Date","now","toISOString","children","birthdate","interests","developmentalFocus","mockActivities","title","description","images","timeRequired","ageRange","min","max","developmentalAreas","materials","steps","isPremium","mockFavorites","mockHistory","activity","completedDate","notes","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","status","removeItem","useMockData","register","userData","console","log","post","data","resolve","setTimeout","message","mockResponse","user","login","password","getUserProfile","get","updateUserProfile","profileData","put","updatedUser","getChildren","addChild","childData","newChild","child","updateChild","childId","find","c","updatedChild","deleteChild","delete","success","updateSubscription","subscriptionData","plan","expiryDate","getActivities","params","filteredActivities","ageMin","undefined","ageMax","filter","limit","slice","activities","total","length","page","getActivityById","id","a","getFavorites","addToFavorites","activityId","removeFromFavorites","getActivityHistory","addToHistory","historyEntry"],"sources":["/home/kobus/mom-activities-app/client/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create a mock user for development\nconst mockUser = {\n  _id: 'user1',\n  name: 'Jane Smith',\n  email: 'jane@example.com',\n  subscription: 'premium',\n  subscriptionExpiry: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n  children: [\n    {\n      _id: 'child1',\n      name: 'Emma',\n      birthdate: new Date(Date.now() - 3 * 365 * 24 * 60 * 60 * 1000).toISOString(),\n      interests: ['animals', 'drawing', 'music'],\n      developmentalFocus: ['language', 'motor']\n    }\n  ]\n};\n\n// Mock activities\nconst mockActivities = [\n  {\n    _id: '1',\n    title: 'Sensory Water Play',\n    description: 'Develop fine motor skills and sensory exploration with water and various containers.',\n    images: ['https://images.unsplash.com/photo-1596464716127-f2a82984de30?w=500&auto=format&fit=crop'],\n    timeRequired: 20,\n    ageRange: { min: 1, max: 3 },\n    developmentalAreas: ['sensory', 'motor'],\n    materials: ['Water', 'Containers', 'Toys'],\n    steps: [\n      'Fill containers with water',\n      'Add toys and tools for exploration',\n      'Supervise play and encourage exploration'\n    ],\n    isPremium: false\n  },\n  {\n    _id: '2',\n    title: 'Color Sorting Game',\n    description: 'Learn colors and practice categorization with this simple sorting activity.',\n    images: ['https://images.unsplash.com/photo-1615147342761-9238e15d8b96?w=500&auto=format&fit=crop'],\n    timeRequired: 15,\n    ageRange: { min: 2, max: 4 },\n    developmentalAreas: ['cognitive', 'motor'],\n    materials: ['Colored objects', 'Sorting containers'],\n    steps: [\n      'Gather colored objects',\n      'Set up sorting containers',\n      'Demonstrate sorting by color',\n      'Let child practice sorting'\n    ],\n    isPremium: false\n  },\n  {\n    _id: '3',\n    title: 'DIY Musical Instruments',\n    description: 'Create simple instruments and explore rhythm, sound, and music concepts.',\n    images: ['https://images.unsplash.com/photo-1619379179326-c50977cd30fa?w=500&auto=format&fit=crop'],\n    timeRequired: 30,\n    ageRange: { min: 3, max: 6 },\n    developmentalAreas: ['creative', 'motor', 'cognitive'],\n    materials: ['Empty containers', 'Rice/beans', 'Rubber bands'],\n    steps: [\n      'Gather materials',\n      'Create shakers with containers and rice',\n      'Make string instruments with rubber bands',\n      'Explore different sounds'\n    ],\n    isPremium: false\n  }\n];\n\n// Mock favorites\nconst mockFavorites = [mockActivities[0], mockActivities[2]];\n\n// Mock history\nconst mockHistory = [\n  {\n    _id: 'history1',\n    activity: mockActivities[0],\n    completedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n    notes: 'Emma loved playing with the water colors!'\n  },\n  {\n    _id: 'history2',\n    activity: mockActivities[1],\n    completedDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n    notes: null\n  }\n];\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include the auth token in all requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    // Handle 401 Unauthorized errors (token expired or invalid)\n    if (error.response && error.response.status === 401) {\n      localStorage.removeItem('token');\n      // You could redirect to login page here or handle in the component\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Use mock data for all API calls\nconst useMockData = true;\n\n// Authentication API calls\nexport const register = async (userData) => {\n  try {\n    console.log('API: register called with', userData);\n    const response = await api.post('/api/auth/register', userData);\n    console.log('API: register response', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('API: register error', error);\n    if (useMockData) {\n      console.log('API: Using mock data for register');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Check if email already exists\n      if (userData.email === mockUser.email) {\n        throw { response: { data: { message: 'Email already in use' } } };\n      }\n      \n      // Return mock response\n      const mockResponse = {\n        token: 'mock-token-12345',\n        user: {\n          ...mockUser,\n          name: userData.name,\n          email: userData.email\n        }\n      };\n      console.log('API: mock register response', mockResponse);\n      return mockResponse;\n    }\n    throw error;\n  }\n};\n\nexport const login = async (userData) => {\n  try {\n    console.log('API: login called with', userData);\n    const response = await api.post('/api/auth/login', userData);\n    console.log('API: login response', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('API: login error', error);\n    if (useMockData) {\n      console.log('API: Using mock data for login');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Check credentials (very simple mock)\n      if (userData.email === mockUser.email && userData.password === 'password') {\n        const mockResponse = {\n          token: 'mock-token-12345',\n          user: mockUser\n        };\n        console.log('API: mock login response', mockResponse);\n        return mockResponse;\n      } else {\n        throw { response: { data: { message: 'Invalid credentials' } } };\n      }\n    }\n    throw error;\n  }\n};\n\n// User profile related API calls\nexport const getUserProfile = async () => {\n  try {\n    console.log('API: getUserProfile called');\n    const response = await api.get('/api/auth/me');\n    console.log('API: getUserProfile response', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('API: getUserProfile error', error);\n    if (useMockData) {\n      console.log('API: Using mock data for getUserProfile');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      console.log('API: mock getUserProfile response', mockUser);\n      return mockUser;\n    }\n    throw error;\n  }\n};\n\nexport const updateUserProfile = async (profileData) => {\n  try {\n    const response = await api.put('/api/users/profile', profileData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const updatedUser = {\n        ...mockUser,\n        ...profileData\n      };\n      \n      return { user: updatedUser };\n    }\n    throw error;\n  }\n};\n\n// Children related API calls\nexport const getChildren = async () => {\n  try {\n    const response = await api.get('/api/users/children');\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return mockUser.children;\n    }\n    throw error;\n  }\n};\n\nexport const addChild = async (childData) => {\n  try {\n    const response = await api.post('/api/users/children', childData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const newChild = {\n        _id: `child-${Date.now()}`,\n        ...childData\n      };\n      \n      return { child: newChild };\n    }\n    throw error;\n  }\n};\n\nexport const updateChild = async (childId, childData) => {\n  try {\n    const response = await api.put(`/api/users/children/${childId}`, childData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const child = mockUser.children.find(c => c._id === childId);\n      if (!child) {\n        throw { response: { status: 404, data: { message: 'Child not found' } } };\n      }\n      \n      const updatedChild = {\n        ...child,\n        ...childData\n      };\n      \n      return { child: updatedChild };\n    }\n    throw error;\n  }\n};\n\nexport const deleteChild = async (childId) => {\n  try {\n    const response = await api.delete(`/api/users/children/${childId}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const child = mockUser.children.find(c => c._id === childId);\n      if (!child) {\n        throw { response: { status: 404, data: { message: 'Child not found' } } };\n      }\n      \n      return { success: true };\n    }\n    throw error;\n  }\n};\n\n// Subscription related API calls\nexport const updateSubscription = async (subscriptionData) => {\n  try {\n    const response = await api.put('/api/users/subscription', subscriptionData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      return {\n        subscription: subscriptionData.plan,\n        expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()\n      };\n    }\n    throw error;\n  }\n};\n\n// Activity related API calls\nexport const getActivities = async (params = {}) => {\n  try {\n    const response = await api.get('/api/activities', { params });\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      // Filter activities based on params\n      let filteredActivities = [...mockActivities];\n      \n      if (params.ageMin !== undefined && params.ageMax !== undefined) {\n        filteredActivities = filteredActivities.filter(activity => \n          activity.ageRange.max >= params.ageMin && activity.ageRange.min <= params.ageMax\n        );\n      }\n      \n      if (params.limit) {\n        filteredActivities = filteredActivities.slice(0, params.limit);\n      }\n      \n      return {\n        activities: filteredActivities,\n        total: mockActivities.length,\n        page: 1,\n        limit: params.limit || mockActivities.length\n      };\n    }\n    throw error;\n  }\n};\n\nexport const getActivityById = async (id) => {\n  try {\n    const response = await api.get(`/api/activities/${id}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      \n      const activity = mockActivities.find(a => a._id === id);\n      if (!activity) {\n        throw { response: { status: 404, data: { message: 'Activity not found' } } };\n      }\n      \n      return activity;\n    }\n    throw error;\n  }\n};\n\n// Favorites related API calls\nexport const getFavorites = async () => {\n  try {\n    const response = await api.get('/api/users/favorites');\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return mockFavorites;\n    }\n    throw error;\n  }\n};\n\nexport const addToFavorites = async (activityId) => {\n  try {\n    const response = await api.post('/api/users/favorites', { activityId });\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      \n      const activity = mockActivities.find(a => a._id === activityId);\n      if (!activity) {\n        throw { response: { status: 404, data: { message: 'Activity not found' } } };\n      }\n      \n      return { success: true, activity };\n    }\n    throw error;\n  }\n};\n\nexport const removeFromFavorites = async (activityId) => {\n  try {\n    const response = await api.delete(`/api/users/favorites/${activityId}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return { success: true };\n    }\n    throw error;\n  }\n};\n\n// Activity history related API calls\nexport const getActivityHistory = async () => {\n  try {\n    const response = await api.get('/api/users/activity-history');\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return mockHistory;\n    }\n    throw error;\n  }\n};\n\nexport const addToHistory = async (activityId, notes = null) => {\n  try {\n    const response = await api.post('/api/users/activity-history', { activityId, notes });\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      \n      const activity = mockActivities.find(a => a._id === activityId);\n      if (!activity) {\n        throw { response: { status: 404, data: { message: 'Activity not found' } } };\n      }\n      \n      const historyEntry = {\n        _id: `history-${Date.now()}`,\n        activity,\n        completedDate: new Date().toISOString(),\n        notes\n      };\n      \n      return historyEntry;\n    }\n    throw error;\n  }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}