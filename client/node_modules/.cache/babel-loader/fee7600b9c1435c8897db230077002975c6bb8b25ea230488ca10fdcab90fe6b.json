{"ast":null,"code":"import axios from 'axios';\n\n// Create a mock user for development\nconst mockUser = {\n  _id: 'user1',\n  name: 'Jane Smith',\n  email: 'jane@example.com',\n  subscription: 'premium',\n  subscriptionExpiry: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n  children: [{\n    _id: 'child1',\n    name: 'Emma',\n    birthdate: new Date(Date.now() - 3 * 365 * 24 * 60 * 60 * 1000).toISOString(),\n    interests: ['animals', 'drawing', 'music'],\n    developmentalFocus: ['language', 'motor']\n  }]\n};\n\n// Mock activities\nconst mockActivities = [{\n  _id: '1',\n  title: 'Sensory Water Play',\n  description: 'Develop fine motor skills and sensory exploration with water and various containers.',\n  images: ['https://images.unsplash.com/photo-1596464716127-f2a82984de30?w=500&auto=format&fit=crop'],\n  timeRequired: 20,\n  ageRange: {\n    min: 1,\n    max: 3\n  },\n  developmentalAreas: ['sensory', 'motor'],\n  materials: ['Water', 'Containers', 'Toys'],\n  steps: ['Fill containers with water', 'Add toys and tools for exploration', 'Supervise play and encourage exploration'],\n  isPremium: false\n}, {\n  _id: '2',\n  title: 'Color Sorting Game',\n  description: 'Learn colors and practice categorization with this simple sorting activity.',\n  images: ['https://images.unsplash.com/photo-1615147342761-9238e15d8b96?w=500&auto=format&fit=crop'],\n  timeRequired: 15,\n  ageRange: {\n    min: 2,\n    max: 4\n  },\n  developmentalAreas: ['cognitive', 'motor'],\n  materials: ['Colored objects', 'Sorting containers'],\n  steps: ['Gather colored objects', 'Set up sorting containers', 'Demonstrate sorting by color', 'Let child practice sorting'],\n  isPremium: false\n}, {\n  _id: '3',\n  title: 'DIY Musical Instruments',\n  description: 'Create simple instruments and explore rhythm, sound, and music concepts.',\n  images: ['https://images.unsplash.com/photo-1619379179326-c50977cd30fa?w=500&auto=format&fit=crop'],\n  timeRequired: 30,\n  ageRange: {\n    min: 3,\n    max: 6\n  },\n  developmentalAreas: ['creative', 'motor', 'cognitive'],\n  materials: ['Empty containers', 'Rice/beans', 'Rubber bands'],\n  steps: ['Gather materials', 'Create shakers with containers and rice', 'Make string instruments with rubber bands', 'Explore different sounds'],\n  isPremium: false\n}];\n\n// Mock favorites\nconst mockFavorites = [mockActivities[0], mockActivities[2]];\n\n// Mock history\nconst mockHistory = [{\n  _id: 'history1',\n  activity: mockActivities[0],\n  completedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n  notes: 'Emma loved playing with the water colors!'\n}, {\n  _id: 'history2',\n  activity: mockActivities[1],\n  completedDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n  notes: null\n}];\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include the auth token in all requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  // Handle 401 Unauthorized errors (token expired or invalid)\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem('token');\n    // You could redirect to login page here or handle in the component\n  }\n\n  // Log all API errors for debugging\n  console.error('API Error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n  return Promise.reject(error);\n});\n\n// Use mock data for all API calls\nconst useMockData = true;\n// Also use mock data when server returns errors\nconst fallbackToMockOnError = true;\n\n// Authentication API calls\nexport const register = async userData => {\n  try {\n    console.log('API: register called with', userData);\n    const response = await api.post('/api/auth/register', userData);\n    console.log('API: register response', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response3;\n    console.error('API: register error', error);\n\n    // Check if we should use mock data (either by default or as fallback)\n    if (useMockData || fallbackToMockOnError && ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) >= 500) {\n      console.log('API: Using mock data for register (server error fallback)');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // For mock data, allow registration with any email for testing\n      const mockResponse = {\n        token: 'mock-token-12345',\n        user: {\n          ...mockUser,\n          name: userData.name,\n          email: userData.email\n        }\n      };\n      console.log('API: mock register response', mockResponse);\n      return mockResponse;\n    }\n    throw error;\n  }\n};\nexport const login = async userData => {\n  try {\n    console.log('API: login called with', userData);\n    const response = await api.post('/api/auth/login', userData);\n    console.log('API: login response', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    console.error('API: login error', error);\n\n    // Check if we should use mock data (either by default or as fallback)\n    if (useMockData || fallbackToMockOnError && ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) >= 500) {\n      console.log('API: Using mock data for login (server error fallback)');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // For mock data, create a user based on the email provided\n      const mockResponse = {\n        token: 'mock-token-12345',\n        user: {\n          ...mockUser,\n          name: userData.email.split('@')[0],\n          // Use part of email as name\n          email: userData.email\n        }\n      };\n      console.log('API: mock login response', mockResponse);\n      return mockResponse;\n    }\n    throw error;\n  }\n};\n\n// User profile related API calls\nexport const getUserProfile = async () => {\n  try {\n    console.log('API: getUserProfile called');\n    const response = await api.get('/api/auth/me');\n    console.log('API: getUserProfile response', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response5;\n    console.error('API: getUserProfile error', error);\n\n    // Check if we should use mock data (either by default or as fallback)\n    if (useMockData || fallbackToMockOnError && ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) >= 500) {\n      console.log('API: Using mock data for getUserProfile (server error fallback)');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n\n      // Get email from localStorage if available\n      const storedUser = localStorage.getItem('user');\n      let userEmail = 'user@example.com';\n      let userName = 'User';\n      if (storedUser) {\n        try {\n          const parsedUser = JSON.parse(storedUser);\n          userEmail = parsedUser.email || userEmail;\n          userName = parsedUser.name || userName;\n        } catch (e) {\n          console.error('Error parsing stored user:', e);\n        }\n      }\n      const customMockUser = {\n        ...mockUser,\n        name: userName,\n        email: userEmail\n      };\n      console.log('API: mock getUserProfile response', customMockUser);\n      return customMockUser;\n    }\n    throw error;\n  }\n};\nexport const updateUserProfile = async profileData => {\n  try {\n    const response = await api.put('/api/users/profile', profileData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const updatedUser = {\n        ...mockUser,\n        ...profileData\n      };\n      return {\n        user: updatedUser\n      };\n    }\n    throw error;\n  }\n};\n\n// Children related API calls\nexport const getChildren = async () => {\n  try {\n    const response = await api.get('/api/users/children');\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return mockUser.children;\n    }\n    throw error;\n  }\n};\nexport const addChild = async childData => {\n  try {\n    const response = await api.post('/api/users/children', childData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const newChild = {\n        _id: `child-${Date.now()}`,\n        ...childData\n      };\n      return {\n        child: newChild\n      };\n    }\n    throw error;\n  }\n};\nexport const updateChild = async (childId, childData) => {\n  try {\n    const response = await api.put(`/api/users/children/${childId}`, childData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const child = mockUser.children.find(c => c._id === childId);\n      if (!child) {\n        throw {\n          response: {\n            status: 404,\n            data: {\n              message: 'Child not found'\n            }\n          }\n        };\n      }\n      const updatedChild = {\n        ...child,\n        ...childData\n      };\n      return {\n        child: updatedChild\n      };\n    }\n    throw error;\n  }\n};\nexport const deleteChild = async childId => {\n  try {\n    const response = await api.delete(`/api/users/children/${childId}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const child = mockUser.children.find(c => c._id === childId);\n      if (!child) {\n        throw {\n          response: {\n            status: 404,\n            data: {\n              message: 'Child not found'\n            }\n          }\n        };\n      }\n      return {\n        success: true\n      };\n    }\n    throw error;\n  }\n};\n\n// Subscription related API calls\nexport const updateSubscription = async subscriptionData => {\n  try {\n    const response = await api.put('/api/users/subscription', subscriptionData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return {\n        subscription: subscriptionData.plan,\n        expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()\n      };\n    }\n    throw error;\n  }\n};\n\n// Activity related API calls\nexport const getActivities = async (params = {}) => {\n  try {\n    const response = await api.get('/api/activities', {\n      params\n    });\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n\n      // Filter activities based on params\n      let filteredActivities = [...mockActivities];\n      if (params.ageMin !== undefined && params.ageMax !== undefined) {\n        filteredActivities = filteredActivities.filter(activity => activity.ageRange.max >= params.ageMin && activity.ageRange.min <= params.ageMax);\n      }\n      if (params.limit) {\n        filteredActivities = filteredActivities.slice(0, params.limit);\n      }\n      return {\n        activities: filteredActivities,\n        total: mockActivities.length,\n        page: 1,\n        limit: params.limit || mockActivities.length\n      };\n    }\n    throw error;\n  }\n};\nexport const getActivityById = async id => {\n  try {\n    const response = await api.get(`/api/activities/${id}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      const activity = mockActivities.find(a => a._id === id);\n      if (!activity) {\n        throw {\n          response: {\n            status: 404,\n            data: {\n              message: 'Activity not found'\n            }\n          }\n        };\n      }\n      return activity;\n    }\n    throw error;\n  }\n};\n\n// Favorites related API calls\nexport const getFavorites = async () => {\n  try {\n    const response = await api.get('/api/users/favorites');\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return mockFavorites;\n    }\n    throw error;\n  }\n};\nexport const addToFavorites = async activityId => {\n  try {\n    const response = await api.post('/api/users/favorites', {\n      activityId\n    });\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      const activity = mockActivities.find(a => a._id === activityId);\n      if (!activity) {\n        throw {\n          response: {\n            status: 404,\n            data: {\n              message: 'Activity not found'\n            }\n          }\n        };\n      }\n      return {\n        success: true,\n        activity\n      };\n    }\n    throw error;\n  }\n};\nexport const removeFromFavorites = async activityId => {\n  try {\n    const response = await api.delete(`/api/users/favorites/${activityId}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return {\n        success: true\n      };\n    }\n    throw error;\n  }\n};\n\n// Activity history related API calls\nexport const getActivityHistory = async () => {\n  try {\n    const response = await api.get('/api/users/activity-history');\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return mockHistory;\n    }\n    throw error;\n  }\n};\nexport const addToHistory = async (activityId, notes = null) => {\n  try {\n    const response = await api.post('/api/users/activity-history', {\n      activityId,\n      notes\n    });\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      const activity = mockActivities.find(a => a._id === activityId);\n      if (!activity) {\n        throw {\n          response: {\n            status: 404,\n            data: {\n              message: 'Activity not found'\n            }\n          }\n        };\n      }\n      const historyEntry = {\n        _id: `history-${Date.now()}`,\n        activity,\n        completedDate: new Date().toISOString(),\n        notes\n      };\n      return historyEntry;\n    }\n    throw error;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","mockUser","_id","name","email","subscription","subscriptionExpiry","Date","now","toISOString","children","birthdate","interests","developmentalFocus","mockActivities","title","description","images","timeRequired","ageRange","min","max","developmentalAreas","materials","steps","isPremium","mockFavorites","mockHistory","activity","completedDate","notes","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","_error$response","_error$response2","status","removeItem","console","data","message","useMockData","fallbackToMockOnError","register","userData","log","post","_error$response3","resolve","setTimeout","mockResponse","user","login","_error$response4","split","getUserProfile","get","_error$response5","storedUser","userEmail","userName","parsedUser","JSON","parse","e","customMockUser","updateUserProfile","profileData","put","updatedUser","getChildren","addChild","childData","newChild","child","updateChild","childId","find","c","updatedChild","deleteChild","delete","success","updateSubscription","subscriptionData","plan","expiryDate","getActivities","params","filteredActivities","ageMin","undefined","ageMax","filter","limit","slice","activities","total","length","page","getActivityById","id","a","getFavorites","addToFavorites","activityId","removeFromFavorites","getActivityHistory","addToHistory","historyEntry"],"sources":["/home/kobus/mom-activities-app/client/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create a mock user for development\nconst mockUser = {\n  _id: 'user1',\n  name: 'Jane Smith',\n  email: 'jane@example.com',\n  subscription: 'premium',\n  subscriptionExpiry: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n  children: [\n    {\n      _id: 'child1',\n      name: 'Emma',\n      birthdate: new Date(Date.now() - 3 * 365 * 24 * 60 * 60 * 1000).toISOString(),\n      interests: ['animals', 'drawing', 'music'],\n      developmentalFocus: ['language', 'motor']\n    }\n  ]\n};\n\n// Mock activities\nconst mockActivities = [\n  {\n    _id: '1',\n    title: 'Sensory Water Play',\n    description: 'Develop fine motor skills and sensory exploration with water and various containers.',\n    images: ['https://images.unsplash.com/photo-1596464716127-f2a82984de30?w=500&auto=format&fit=crop'],\n    timeRequired: 20,\n    ageRange: { min: 1, max: 3 },\n    developmentalAreas: ['sensory', 'motor'],\n    materials: ['Water', 'Containers', 'Toys'],\n    steps: [\n      'Fill containers with water',\n      'Add toys and tools for exploration',\n      'Supervise play and encourage exploration'\n    ],\n    isPremium: false\n  },\n  {\n    _id: '2',\n    title: 'Color Sorting Game',\n    description: 'Learn colors and practice categorization with this simple sorting activity.',\n    images: ['https://images.unsplash.com/photo-1615147342761-9238e15d8b96?w=500&auto=format&fit=crop'],\n    timeRequired: 15,\n    ageRange: { min: 2, max: 4 },\n    developmentalAreas: ['cognitive', 'motor'],\n    materials: ['Colored objects', 'Sorting containers'],\n    steps: [\n      'Gather colored objects',\n      'Set up sorting containers',\n      'Demonstrate sorting by color',\n      'Let child practice sorting'\n    ],\n    isPremium: false\n  },\n  {\n    _id: '3',\n    title: 'DIY Musical Instruments',\n    description: 'Create simple instruments and explore rhythm, sound, and music concepts.',\n    images: ['https://images.unsplash.com/photo-1619379179326-c50977cd30fa?w=500&auto=format&fit=crop'],\n    timeRequired: 30,\n    ageRange: { min: 3, max: 6 },\n    developmentalAreas: ['creative', 'motor', 'cognitive'],\n    materials: ['Empty containers', 'Rice/beans', 'Rubber bands'],\n    steps: [\n      'Gather materials',\n      'Create shakers with containers and rice',\n      'Make string instruments with rubber bands',\n      'Explore different sounds'\n    ],\n    isPremium: false\n  }\n];\n\n// Mock favorites\nconst mockFavorites = [mockActivities[0], mockActivities[2]];\n\n// Mock history\nconst mockHistory = [\n  {\n    _id: 'history1',\n    activity: mockActivities[0],\n    completedDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n    notes: 'Emma loved playing with the water colors!'\n  },\n  {\n    _id: 'history2',\n    activity: mockActivities[1],\n    completedDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n    notes: null\n  }\n];\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include the auth token in all requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    // Handle 401 Unauthorized errors (token expired or invalid)\n    if (error.response && error.response.status === 401) {\n      localStorage.removeItem('token');\n      // You could redirect to login page here or handle in the component\n    }\n    \n    // Log all API errors for debugging\n    console.error('API Error:', error.response?.status, error.response?.data || error.message);\n    \n    return Promise.reject(error);\n  }\n);\n\n// Use mock data for all API calls\nconst useMockData = true;\n// Also use mock data when server returns errors\nconst fallbackToMockOnError = true;\n\n// Authentication API calls\nexport const register = async (userData) => {\n  try {\n    console.log('API: register called with', userData);\n    const response = await api.post('/api/auth/register', userData);\n    console.log('API: register response', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('API: register error', error);\n    \n    // Check if we should use mock data (either by default or as fallback)\n    if (useMockData || (fallbackToMockOnError && error.response?.status >= 500)) {\n      console.log('API: Using mock data for register (server error fallback)');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // For mock data, allow registration with any email for testing\n      const mockResponse = {\n        token: 'mock-token-12345',\n        user: {\n          ...mockUser,\n          name: userData.name,\n          email: userData.email\n        }\n      };\n      console.log('API: mock register response', mockResponse);\n      return mockResponse;\n    }\n    \n    throw error;\n  }\n};\n\nexport const login = async (userData) => {\n  try {\n    console.log('API: login called with', userData);\n    const response = await api.post('/api/auth/login', userData);\n    console.log('API: login response', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('API: login error', error);\n    \n    // Check if we should use mock data (either by default or as fallback)\n    if (useMockData || (fallbackToMockOnError && error.response?.status >= 500)) {\n      console.log('API: Using mock data for login (server error fallback)');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // For mock data, create a user based on the email provided\n      const mockResponse = {\n        token: 'mock-token-12345',\n        user: {\n          ...mockUser,\n          name: userData.email.split('@')[0], // Use part of email as name\n          email: userData.email\n        }\n      };\n      console.log('API: mock login response', mockResponse);\n      return mockResponse;\n    }\n    \n    throw error;\n  }\n};\n\n// User profile related API calls\nexport const getUserProfile = async () => {\n  try {\n    console.log('API: getUserProfile called');\n    const response = await api.get('/api/auth/me');\n    console.log('API: getUserProfile response', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('API: getUserProfile error', error);\n    \n    // Check if we should use mock data (either by default or as fallback)\n    if (useMockData || (fallbackToMockOnError && error.response?.status >= 500)) {\n      console.log('API: Using mock data for getUserProfile (server error fallback)');\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      // Get email from localStorage if available\n      const storedUser = localStorage.getItem('user');\n      let userEmail = 'user@example.com';\n      let userName = 'User';\n      \n      if (storedUser) {\n        try {\n          const parsedUser = JSON.parse(storedUser);\n          userEmail = parsedUser.email || userEmail;\n          userName = parsedUser.name || userName;\n        } catch (e) {\n          console.error('Error parsing stored user:', e);\n        }\n      }\n      \n      const customMockUser = {\n        ...mockUser,\n        name: userName,\n        email: userEmail\n      };\n      \n      console.log('API: mock getUserProfile response', customMockUser);\n      return customMockUser;\n    }\n    \n    throw error;\n  }\n};\n\nexport const updateUserProfile = async (profileData) => {\n  try {\n    const response = await api.put('/api/users/profile', profileData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const updatedUser = {\n        ...mockUser,\n        ...profileData\n      };\n      \n      return { user: updatedUser };\n    }\n    throw error;\n  }\n};\n\n// Children related API calls\nexport const getChildren = async () => {\n  try {\n    const response = await api.get('/api/users/children');\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return mockUser.children;\n    }\n    throw error;\n  }\n};\n\nexport const addChild = async (childData) => {\n  try {\n    const response = await api.post('/api/users/children', childData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const newChild = {\n        _id: `child-${Date.now()}`,\n        ...childData\n      };\n      \n      return { child: newChild };\n    }\n    throw error;\n  }\n};\n\nexport const updateChild = async (childId, childData) => {\n  try {\n    const response = await api.put(`/api/users/children/${childId}`, childData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const child = mockUser.children.find(c => c._id === childId);\n      if (!child) {\n        throw { response: { status: 404, data: { message: 'Child not found' } } };\n      }\n      \n      const updatedChild = {\n        ...child,\n        ...childData\n      };\n      \n      return { child: updatedChild };\n    }\n    throw error;\n  }\n};\n\nexport const deleteChild = async (childId) => {\n  try {\n    const response = await api.delete(`/api/users/children/${childId}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const child = mockUser.children.find(c => c._id === childId);\n      if (!child) {\n        throw { response: { status: 404, data: { message: 'Child not found' } } };\n      }\n      \n      return { success: true };\n    }\n    throw error;\n  }\n};\n\n// Subscription related API calls\nexport const updateSubscription = async (subscriptionData) => {\n  try {\n    const response = await api.put('/api/users/subscription', subscriptionData);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      return {\n        subscription: subscriptionData.plan,\n        expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()\n      };\n    }\n    throw error;\n  }\n};\n\n// Activity related API calls\nexport const getActivities = async (params = {}) => {\n  try {\n    const response = await api.get('/api/activities', { params });\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      // Filter activities based on params\n      let filteredActivities = [...mockActivities];\n      \n      if (params.ageMin !== undefined && params.ageMax !== undefined) {\n        filteredActivities = filteredActivities.filter(activity => \n          activity.ageRange.max >= params.ageMin && activity.ageRange.min <= params.ageMax\n        );\n      }\n      \n      if (params.limit) {\n        filteredActivities = filteredActivities.slice(0, params.limit);\n      }\n      \n      return {\n        activities: filteredActivities,\n        total: mockActivities.length,\n        page: 1,\n        limit: params.limit || mockActivities.length\n      };\n    }\n    throw error;\n  }\n};\n\nexport const getActivityById = async (id) => {\n  try {\n    const response = await api.get(`/api/activities/${id}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      \n      const activity = mockActivities.find(a => a._id === id);\n      if (!activity) {\n        throw { response: { status: 404, data: { message: 'Activity not found' } } };\n      }\n      \n      return activity;\n    }\n    throw error;\n  }\n};\n\n// Favorites related API calls\nexport const getFavorites = async () => {\n  try {\n    const response = await api.get('/api/users/favorites');\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return mockFavorites;\n    }\n    throw error;\n  }\n};\n\nexport const addToFavorites = async (activityId) => {\n  try {\n    const response = await api.post('/api/users/favorites', { activityId });\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      \n      const activity = mockActivities.find(a => a._id === activityId);\n      if (!activity) {\n        throw { response: { status: 404, data: { message: 'Activity not found' } } };\n      }\n      \n      return { success: true, activity };\n    }\n    throw error;\n  }\n};\n\nexport const removeFromFavorites = async (activityId) => {\n  try {\n    const response = await api.delete(`/api/users/favorites/${activityId}`);\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      return { success: true };\n    }\n    throw error;\n  }\n};\n\n// Activity history related API calls\nexport const getActivityHistory = async () => {\n  try {\n    const response = await api.get('/api/users/activity-history');\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return mockHistory;\n    }\n    throw error;\n  }\n};\n\nexport const addToHistory = async (activityId, notes = null) => {\n  try {\n    const response = await api.post('/api/users/activity-history', { activityId, notes });\n    return response.data;\n  } catch (error) {\n    if (useMockData) {\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 200));\n      \n      const activity = mockActivities.find(a => a._id === activityId);\n      if (!activity) {\n        throw { response: { status: 404, data: { message: 'Activity not found' } } };\n      }\n      \n      const historyEntry = {\n        _id: `history-${Date.now()}`,\n        activity,\n        completedDate: new Date().toISOString(),\n        notes\n      };\n      \n      return historyEntry;\n    }\n    throw error;\n  }\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}